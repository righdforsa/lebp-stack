##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
      listen [::]:80;
      server_name lebp-stack.dev;
      ##** nginx redirect ALL http requests to https ** ##
      return      301 https://$server_name$request_uri;
}

server {
    server_name lebp-stack.dev;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        ssl on;
        #ssl_certificate /etc/nginx/dev.theneighborhoodsquatch.com.pem;
        ssl_certificate /etc/nginx/lebp-stack.dev.crt;
        #ssl_certificate_key /etc/nginx/dev.theneighborhoodsquatch.com.privkey.pem;
        ssl_certificate_key /etc/nginx/lebp-stack.dev.key;

	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html/api;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	#server_name _;
    add_header 'Access-Control-Allow-Origin' '*' always;
    ##TODO try this: add_header 'Access-Control-Allow-Origin' 'https://app.theneighborhoodsquatch.com';
    add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';

    if ($request_method = 'OPTIONS') {
        return 204;
    } 

	location ~ /(\.htaccess|\.git|\.md) {
		return 404;
	}

	location ~ /(vendor|composer\.(json|lock)) {
		return 404;
	}

    location ~ /(api_lib|api_command) {
		return 404;
	}

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	# pass PHP scripts to FastCGI server
	#
	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
	
	#	# With php-fpm (or other unix sockets):
		fastcgi_pass unix:/var/run/php/php-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}
